Design an API Rate Limiter which will throttle users based upon the number of the requests they are sending.


Client -> Web Server -> Rate Limiting Service -> Database
                   -> Application Server

On Violation:
HTTP Response - 429 - Too many requests

Data Model
    UserId - 8 Bytes
    timestamp 8 bytes

    16 bytes to store data

    16 bytes * 1 mill = 16,000,000 bytes = 16 MB * number of requests

    Use a sliding window to track requests of 1 minute
    Seconds |0 30 60|
    Request |1  2  3|

    Request comes in at t75
    Request at t0 is evicted
    Seconds |30 60|
    Request |2   3|

    Count elements 2, under threshold of 3

    Add new request

    Seconds |30 60 75|
    Request |2   3  4|

    However, a large number of requests would get inserted into the sliding window taking up memory.

We can compact the time range and sum up micro intervals

Data Model
    Timestamp: 8 bytes
    Counter: 8 bytes

    16 bytes * 1 mil users = 16,000,000 bytes = 16 MB * 4 time slices 64 MB

    1 minute
    |Seconds |0 - 15|15-30|30-45|45-60|
    |Requests|  5   |  5  |  5  |  5  |

    Implementation
    Redis hash
    Expire key after 1 min
    Sum up keys to make sure they're under the threshold

    "user1": { 15000: 1, 150015: 1}

Sharding
- Shard on the user id
 - can include more granularity such as API